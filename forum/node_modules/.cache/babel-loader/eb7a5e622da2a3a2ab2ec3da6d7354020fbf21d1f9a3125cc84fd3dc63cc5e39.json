{"ast":null,"code":"var _jsxFileName = \"/workspaces/forum/src/components/Messages.js\",\n  _s = $RefreshSig$();\n// importing necessary items from react and socket.io\nimport { useEffect, useState, useRef } from 'react';\nimport { io } from \"socket.io-client\";\n\n// Assets\nimport person from '../assets/person.svg';\nimport send from '../assets/send.png';\n\n//define socket connection to port 3030\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('ws://localhost:3030');\n//define the Messages component\n\nconst Messages = _ref => {\n  _s();\n  let {\n    account,\n    messages,\n    currentChannel\n  } = _ref;\n  const [message, setMessage] = useState(\"\");\n  const messageEndRef = useRef(null);\n  // defining function to handle sending a message\n  const sendMessage = async e => {\n    //prevent empty submission\n    e.preventDefault();\n    //create message object\n    const messageObj = {\n      channel: currentChannel.id.toString(),\n      account: account,\n      text: message\n    };\n    //checking message not empty\n    //sent the message to the server\n\n    if (message !== \"\") socket.emit('new message', messageObj);\n    setMessage(\"\");\n  };\n  // function to handle scrolling to the end of the messages list\n  const scrollHandler = () => {\n    setTimeout(() => {\n      messageEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }, 500);\n  };\n  useEffect(() => {\n    scrollHandler();\n  });\n\n  // filter and display message of selected channel\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [currentChannel && messages.filter(message => message.channel === currentChannel.id.toString()).map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: person,\n          alt: \"Person\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message_content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: message.account\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [message.text, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messageEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [\" \", currentChannel && account ? /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        placeholder: `Message #${currentChannel.name}`,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 8\n      }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: \"\",\n        placeholder: `Please Connect Wallet / Join the Channel`,\n        disabled: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: send,\n          alt: \"send message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n//export Messages componet as the default export\n_s(Messages, \"jWZjrSYwNXB7axCpfYZp5eTB+6Y=\");\n_c = Messages;\nexport default Messages;\nvar _c;\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["useEffect","useState","useRef","io","person","send","socket","Messages","account","messages","currentChannel","message","setMessage","messageEndRef","sendMessage","e","preventDefault","messageObj","channel","id","toString","text","emit","scrollHandler","setTimeout","current","scrollIntoView","behavior","filter","map","index","name","target","value"],"sources":["/workspaces/forum/src/components/Messages.js"],"sourcesContent":["// importing necessary items from react and socket.io\r\nimport { useEffect, useState, useRef } from 'react'\r\nimport { io } from \"socket.io-client\"\r\n\r\n// Assets\r\nimport person from '../assets/person.svg'\r\nimport send from '../assets/send.png'\r\n\r\n//define socket connection to port 3030\r\nconst socket = io('ws://localhost:3030')\r\n//define the Messages component\r\n\r\nconst Messages = ({ account, messages, currentChannel }) => {\r\n  const[message, setMessage] = useState(\"\")\r\n  const messageEndRef = useRef(null)\r\n // defining function to handle sending a message\r\n  const sendMessage = async (e) => {\r\n    //prevent empty submission\r\n    e.preventDefault()\r\n    //create message object\r\n    const messageObj = {\r\n      channel: currentChannel.id.toString(),\r\n      account: account,\r\n      text: message\r\n    }\r\n    //checking message not empty\r\n    //sent the message to the server\r\n\r\n    if (message !== \"\")\r\n    socket.emit('new message', messageObj)\r\n    setMessage(\"\")\r\n\r\n\r\n  }\r\n  // function to handle scrolling to the end of the messages list\r\n  const scrollHandler = () => {\r\n    setTimeout(() => {\r\n      messageEndRef.current.scrollIntoView({ behavior: 'smooth' })\r\n    }, 500)}\r\n    \r\n    useEffect(() => {\r\n      scrollHandler()\r\n    })\r\n  \r\n  \r\n// filter and display message of selected channel\r\n  return (\r\n    <div className=\"text\">\r\n      <div className=\"messages\">\r\n      {currentChannel && messages.filter(message => message.channel === currentChannel.id.toString()).map((message, index) => (\r\n          <div className=\"message\" key={index}>\r\n            <img src={person} alt=\"Person\" /> {/*profile icon for users */}\r\n            <div className=\"message_content\">\r\n              <h3>{message.account}</h3> {/*display users account address */}\r\n              <p>\r\n                {message.text} {/*display message */}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n\r\n\r\n    <div ref={messageEndRef} />\r\n    </div>\r\n\r\n    <form onSubmit={sendMessage}> {/*orm to input and send message */} \r\n    {currentChannel && account ? (\r\n       <input type=\"text\"\r\n        value={message}\r\n         placeholder={`Message #${currentChannel.name}`}\r\n          onChange={(e) => setMessage(e.target.value)} />\r\n        ) : (\r\n          <input type=\"text\" value=\"\" placeholder={`Please Connect Wallet / Join the Channel`} disabled />\r\n        )}\r\n\r\n      \r\n      <button type=\"submit\">\r\n        <img src={send} alt=\"send message\" /> {/* submit icon */}\r\n      </button>\r\n   </form>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n//export Messages componet as the default export\r\nexport default Messages;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}