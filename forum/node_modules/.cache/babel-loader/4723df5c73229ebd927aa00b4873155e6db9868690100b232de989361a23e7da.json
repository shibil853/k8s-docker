{"ast":null,"code":"var _jsxFileName = \"/workspaces/forum/src/App.js\",\n  _s = $RefreshSig$();\n// Importing necessary libraries and components\n\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { io } from \"socket.io-client\";\n\n// Components\nimport Navigation from './components/Navigation';\nimport Servers from './components/Servers';\nimport Channels from './components/Channels';\nimport Messages from './components/Messages';\n\n//import ABIs\nimport Forum from './abis/Forum.json';\n\n// import Config\nimport config from './config.json';\n\n// socket connect to websocker server\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('ws://localhost:3030');\n// function app\nfunction App() {\n  _s();\n  // defining state variables \n  const [provider, setProvider] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [forum, setForum] = useState(null);\n  const [channels, setChannels] = useState([]);\n  const [currentChannel, setCurrentChannel] = useState(null);\n  const [messages, setMessages] = useState([]);\n  //defining function to load blockchain data\n  const loadBlockchainData = async () => {\n    //creating web3 prvider\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    setProvider(provider);\n    //taking network info\n    const network = await provider.getNetwork();\n    const forum = new ethers.Contract(config[network.chainId].Forum.address, Forum, provider);\n    setForum(forum);\n    const totalChannels = await forum.totalChannels();\n    const channels = [];\n    // loop through channels and ass them to list\n    for (var i = 1; i <= totalChannels; i++) {\n      const channel = await forum.getChannel(i);\n      channels.push(channel);\n    }\n    setChannels(channels);\n\n    //reload page when account change\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', async () => {\n        window.location.reload();\n      });\n    } else {\n      console.error(\"Ethereum object not found, install MetaMask.\");\n    }\n  };\n  // useEffect hook to load blockchain data and setup socket listeners\n  useEffect(() => {\n    loadBlockchainData();\n    //request message when socket connet\n    socket.on(\"connect\", () => {\n      socket.emit('get messages');\n    });\n    //listen for new message and update stste\n    socket.on('new message', messages => {\n      setMessages(messages);\n    });\n    //listen for get message and update state\n    socket.on('get messages', messages => {\n      setMessages(messages);\n    });\n\n    // Cleanup function to remove socket listeners\n    return () => {\n      socket.off('connect');\n      socket.off('new message');\n      socket.off('get messages');\n    };\n  }, []);\n  return (\n    /*#__PURE__*/\n    // navigation component\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {\n        account: account,\n        setAccount: setAccount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [/*#__PURE__*/_jsxDEV(Servers, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(Channels, {\n          provider: provider,\n          account: account,\n          forum: forum,\n          channels: channels,\n          currentChannel: currentChannel,\n          setCurrentChannel: setCurrentChannel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Messages\n        /* messages component */, {\n          account: account,\n          messages: messages,\n          currentChannel: currentChannel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }, this)\n  );\n}\n// export App componet as default export\n_s(App, \"TNvjMrPyiZmBGOUd0TKtccCuayQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","io","Navigation","Servers","Channels","Messages","Forum","config","socket","App","provider","setProvider","account","setAccount","forum","setForum","channels","setChannels","currentChannel","setCurrentChannel","messages","setMessages","loadBlockchainData","providers","Web3Provider","window","ethereum","network","getNetwork","Contract","chainId","address","totalChannels","i","channel","getChannel","push","on","location","reload","console","error","emit","off"],"sources":["/workspaces/forum/src/App.js"],"sourcesContent":["// Importing necessary libraries and components\n\nimport { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport { io } from \"socket.io-client\"\n\n// Components\nimport Navigation from './components/Navigation'\nimport Servers from './components/Servers'\nimport Channels from './components/Channels'\nimport Messages from './components/Messages'\n\n//import ABIs\nimport Forum from './abis/Forum.json'\n\n// import Config\nimport config from './config.json';\n\n// socket connect to websocker server\nconst socket = io('ws://localhost:3030');\n// function app\nfunction App() { \n  // defining state variables \n  const [provider, setProvider] = useState(null)\n  const [account, setAccount] = useState(null)\n  const [forum, setForum] = useState(null)\n  const [channels, setChannels] =useState([])\n  const [currentChannel, setCurrentChannel] = useState(null)\n  const [messages, setMessages] = useState([])\n //defining function to load blockchain data\n  const loadBlockchainData = async () => {\n    //creating web3 prvider\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\n    setProvider(provider)\n    //taking network info\n    const network = await provider.getNetwork()\n    const forum = new ethers.Contract( config[network.chainId]. Forum.address, Forum, provider )\n    setForum(forum)\n    \n    const totalChannels  = await forum.totalChannels()\n    const channels = []\n    // loop through channels and ass them to list\n    for (var i = 1 ; i <= totalChannels; i++){\n      const channel = await forum.getChannel(i)\n      channels.push(channel)\n    }\n    setChannels(channels)\n    \n    //reload page when account change\n    if (window.ethereum) {\n        window.ethereum.on('accountsChanged', async () => {\n            window.location.reload();\n        });\n    } else {\n        console.error(\"Ethereum object not found, install MetaMask.\");\n    }\n};\n  // useEffect hook to load blockchain data and setup socket listeners\n  useEffect(() => {\n    loadBlockchainData()\n    //request message when socket connet\n    socket.on(\"connect\", () => {\n      socket.emit('get messages')\n    })\n    //listen for new message and update stste\n    socket.on('new message', (messages) => {\n      setMessages(messages)\n    })\n    //listen for get message and update state\n    socket.on('get messages', (messages) => {\n      setMessages(messages)\n    })\n        \n    // Cleanup function to remove socket listeners\n    return () => {\n      socket.off('connect')\n      socket.off('new message')\n      socket.off('get messages')\n    }\n\n\n  }, [])\n\n  return (\n    // navigation component\n    <div>\n     <Navigation account={account} setAccount={setAccount}/>\n     <h1>{}</h1>\n\n      <main>\n        {/* server component */}\n       <Servers/>\n      {/* channels component */}\n        <Channels\n        provider={provider}\n        account={account}\n        forum={forum}\n        channels={channels}\n        currentChannel={currentChannel}\n        setCurrentChannel={setCurrentChannel}\n        />\n      \n        <Messages\n        /* messages component */\n        account={account}\n        messages={messages}\n        currentChannel={currentChannel}\n         />\n\n      </main>\n    </div>\n  );\n}\n// export App componet as default export\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}